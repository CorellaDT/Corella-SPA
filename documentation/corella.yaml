openapi: 3.0.0
info:
  title: Corella
  description: SPA description
  version: 1.0.0
servers:
  - url: 'https://corella.dimatech.org'
paths:
  /login:
    post:
      summary: Retrieves user's JWT
      tags:
        - User management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 1
                  maxLength: 50
                password:
                  type: string
                  minLength: 6
                  maxLength: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - jwt
                  - isAdmin
                  - _id
                properties:
                  jwt:
                    type: string
                  username:
                    type: string
                    minLength: 1
                    maxLength: 50
                  isAdmin:
                    type: boolean
        '401':
          description: Unauthorized
  /users:
    get:
      summary: Retrieves all users
      tags:
        - User management
      parameters:
        - in: query
          name: limit
          description: number of users per page
          schema:
            type: integer
        - in: query
          name: page
          description: page to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: number of users retrieved by the query
                  pageCount:
                    type: integer
                    description: number of pages retrieved by the query
                  data:
                    type: array
                    items:
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "_id",
                          "email",
                          "username",
                          "isAdmin"
                        ],
                        "properties": {
                          "_id": {
                            "type": "string",
                          },
                          "email": {
                            "type": "string",
                          },
                          "username": {
                            "type": "string"
                          }
                        }
                      }
        '401':
          description: Unauthorized
    put:
      summary: Creates a new user
      tags:
        - User management
      requestBody:
        content:
          application/json:
            schema:
              {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "email",
                  "username",
                  "password",
                  "isAdmin"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "isAdmin": {
                    "type": "boolean"
                  }
                }
              }
      responses:
        '200':
          description: OK
        '400':
          description: "User with email {enteredEmail}} already exists"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /users/{userId}:
    get:
      summary: Get user by id
      tags:
        - User management
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "_id",
                    "username"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  }
                }
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

    delete:
      summary: Deletes a user
      tags:
        - User management
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Cannot save duplicate object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    patch:
      summary: Overwrites user's data
      tags:
        - User management
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "isAdmin": {
                    "type": "boolean"
                  },
                  "username": {
                    "type": "string"
                  }
                }
              }
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

  /users/{userId}/avatar:
    get:
      summary: Retrieves user's avatar
      tags:
        - User management
      parameters:
        - in: path
          required: true
          name: userId
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

  /projects:
    put:
      summary: Create project
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newProject'
      responses:
        '200':
          description: OK
        '400':
          description: ValidationError
        '403':
          description: Forbidden

    get:
      summary: Retrieves project
      tags:
        - Projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oldProject'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /projects/{projectId}:
    delete:
      summary: Delete project
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/roles:
    get:
      summary: Retrieve project roles
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles'
        '400':
          description: ValidationError
        '403':
          description: Forbidden
    patch:
      summary: Change project roles
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles'
      responses:
        '200':
          description: OK
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/roles/me:
    get:
      summary: Retrieve project role for current user
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles'
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/meta:
    get:
      summary: Retrieves name and description of project
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/issues:
    put:
      summary: Create issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/newIssue'
      responses:
        '200':
          description: OK
        '400':
          description: ValidationError
        '403':
          description: Forbidden
    get:
      summary: Retrieves issue by
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: query
          required: true
          name: issueCode
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/issues/{issueId}/attach:
    post:
      summary: Attach files to issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: issueId
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden

  /projects/{projectId}/issues/{issueId}/detach/{fileId}:
    delete:
      summary: Detach file from issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: issueId
          schema:
            type: string
        - in: path
          required: true
          name: fileId
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
        '404':
          description: File not found

  /projects/{projectId}/issues/{issueId}/attachment/{fileId}:
    get:
      summary: Get file from issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: issueId
          schema:
            type: string
        - in: path
          required: true
          name: fileId
          schema:
            type: string
      responses:
        '200':
          description: Get file from issue
          content:
            text/plain:
              schema:
                type: string
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden

  /projects/{projectId}/issues/{issueId}:
    get:
      summary: Retrieves issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: issueId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
        '400':
          description: ValidationError
        '403':
          description: Forbidden
    delete:
      summary: Delete issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: issueId
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: ValidationError
        '403':
          description: Forbidden
    patch:
      summary: Edit issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: issueId
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/issues/move:
    post:
      summary: Move issue
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moveIssue'
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/columns:
    get:
      summary: Retrieves columns
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  columns:
                    type: array
                    items:
                      $ref: '#/components/schemas/column'
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /projects/{projectId}/columns/{columnId}/limit:
    patch:
      summary: Edit the maximum number of tasks in a column
      tags:
        - Projects
      parameters:
        - in: path
          required: true
          name: projectId
          schema:
            type: string
        - in: path
          required: true
          name: columnId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/column'
        '400':
          description: ValidationError
        '403':
          description: Forbidden

  /config:
    get:
      summary: Recive global config
      tags:
        - Config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalConfig'
        '403':
          description: Forbidden
    patch:
      summary: Patch global config
      tags:
        - Config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/globalConfig'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    user:
      {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          }
        }
      }


    newProject:
      {
        "type": "object",
        "required": [
          "name",
          "columns",
          "roles"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "limit": {
                  "type": "integer"
                }
              }
            }
          },
          "description": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "isManager": {
                  "type": "boolean"
                },
                "isCreator": {
                  "type": "boolean"
                },
                "isDestroyer": {
                  "type": "boolean"
                },
                "isEditor": {
                  "type": "boolean"
                },
                "issueTransitionMatrix": {
                  "type": "object"
                }
              }
            }
          }
        }
      }

    oldProject:
      {
        "type": "object",
        "required": [
          "name",
          "columns",
          "roles"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string",
              "$ref": "#/components/schemas/column"
            }
          },
          "description": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "isManager": {
                  "type": "boolean"
                },
                "isCreator": {
                  "type": "boolean"
                },
                "isDestroyer": {
                  "type": "boolean"
                },
                "isEditor": {
                  "type": "boolean"
                },
                "members": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "$ref": "#/components/schemas/user"
                  }
                },
                "issueTransitionMatrix": {
                  "type": "object"
                }
              }
            }
          }
        }
      }

    column:
      {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isStarting": {
            "type": "boolean"
          },
          "isClosing": {
            "type": "boolean"
          },
          "limit": {
            "type": "number"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }

    roles:
      {   "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "isManager": {
              "type": "boolean"
            },
            "isCreator": {
              "type": "boolean"
            },
            "isDestroyer": {
              "type": "boolean"
            },
            "isEditor": {
              "type": "boolean"
            },
            "issueTransitionMatrix": {
              "type": "object"
            },
            "members": {
              "type": "array",
              "items": {
                "type": "string",
                "$ref": "#/components/schemas/user"
              }
            }
          }

      }

    newIssue:
      {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }

    moveIssue:
      {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "targetColumn": {
            "type": "string"
          },
          "targetPosition": {
            "type": "string"
          },
          "originalColumn": {
            "type": "string"
          }
        }
      }

    issue:
      {
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "checklist": {
            "type": "object"
          },
          "history": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "length": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }

    globalConfig:
      {
        "type": "object",
        "required": [
          "allowedFileTypes"
        ],
        "properties": {
          "allowedFileTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }

security:
  - bearerAuth: []